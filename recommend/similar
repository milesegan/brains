#!/usr/bin/env ruby

class RatingSet

  attr_reader :ratings
  def initialize(lines)
    data = lines.collect { |i| i.chomp.split(":") }
    @ratings = {}
    @totals = {}
    @similarity = {}
    data.each do |r|
      rater, thing, rating = r
      @ratings[rater] ||= {}
      @ratings[rater][thing] = rating.to_i
      @totals[rater] ||= 0
      @totals[rater] += 1
    end
  end

  def raters
    @totals.keys
  end
  
  # calculate simple jaccard similarity
  def jsimilarity(a, b)
    total = 0
    similar = 0
    @ratings[a].each do |thing,rating|
      rb = @ratings[b][thing]
      if rb
        total += 1
        similar += 1 if rb == rating
      end
    end
    similar.to_f / total.to_f
  end

  # calculate euclidiean distance similarity
  def esimilarity(a, b)
    common = 0
    sim = 0.0
    max_common = [@ratings[a].keys.size, @ratings[b].keys.size].min
    @ratings[a].each do |thing,rating|
      rb = @ratings[b][thing]
      if rb
        common += 1
        sim += (rating - rb) ** 2
      end
    end
    if common > 0
      sim = Math.sqrt(sim / common)
      sim = 1.0 - Math.tanh(sim)
      sim * common / max_common
    else
      0
    end
  end

end

d = RatingSet.new(ARGF)
raters = d.raters.sort
subject, *others = raters
others.each do |o|
  js = d.jsimilarity(subject, o)
  es = d.esimilarity(subject, o)
  printf("%s %s jsim %.4f\n", subject, o, js)
  printf("%s %s esim %.4f\n", subject, o, es)
end
