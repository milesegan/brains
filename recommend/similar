#!/usr/bin/env ruby

class RatingSet

  attr_reader :user_ratings, :item_ratings
  def initialize(data)
    @user_ratings = {}
    @item_ratings = {}
    @similarity = {}
    data.each do |r|
      user, item, rating = r
      @user_ratings[user] ||= {}
      @user_ratings[user][item] = rating.to_i
      @item_ratings[item] ||= {}
      @item_ratings[item][user] = rating.to_i
    end
  end

  def users
    @user_ratings.keys
  end

  def items
    @item_ratings.keys
  end
  
  def user_similarity(a, b)
    similarity(a, b, user_ratings)
  end

  def item_similarity(a, b)
    similarity(a, b, item_ratings)
  end

  def estimate_user_based_rating(user, item)
    return user_ratings[user][item] if user_ratings[user][item]

    sim_sum = weight_sum = 0.0
    users.each do |other|
      other_rating = user_ratings[other][item]
      next unless other_rating
      sim = user_similarity(user, other)
      weight = sim * other_rating
      sim_sum += sim
      weight_sum += weight
    end
    if sim_sum > 0.0
      weight_sum / sim_sum
    else
      nil
    end
  end

  def estimate_item_based_rating(user, item)
    return user_ratings[user][item] if user_ratings[user][item]

    sim_sum = weight_sum = 0.0
    items.each do |other|
      other_rating = user_ratings[user][other]
      next unless other_rating
      sim = item_similarity(item, other)
      weight = sim * other_rating
      weight_sum += weight
      sim_sum += sim
    end
    if sim_sum > 0.0
      weight_sum / sim_sum
    else
      nil
    end
  end

  protected
  def similarity(a, b, ratings)
    common = 0
    sim = 0.0
    max_common = [ratings[a].keys.size, ratings[b].keys.size].min
    ratings[a].each do |thing,rating|
      rb = ratings[b][thing]
      if rb
        common += 1
        sim += (rating - rb) ** 2
      end
    end
    if common > 0
      distance = Math.sqrt(sim / common)
      sim = 1.0 - Math.tanh(distance)
      sim * common / max_common
    else
      0
    end
  end            
end

data = ARGF.collect { |i| i.strip.split(":") }
set = RatingSet.new(data)

# calc user-based sims and recs
users = set.users.sort
user, *others = users
others.each do |o|
  sim = set.user_similarity(user, o)
  printf("%s %s similar %.4f\n", user, o, sim)
end
puts

set.items.each do |item|
  rating = set.estimate_user_based_rating(user, item)
  printf("user-based estimate rating %s %s %.2f\n", user, item, rating)
end
puts

# calc item-based sims and recs
items = set.items.sort
item, *others = items
others.each do |o|
  sim = set.item_similarity(item, o)
  printf("%s %s similar %.4f\n", item, o, sim)
end
puts

set.items.each do |item|
  rating = set.estimate_item_based_rating(user, item)
  printf("item-based estimate rating %s %s %.2f\n", user, item, rating)
end
puts
