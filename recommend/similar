#!/usr/bin/env ruby

class RatingSet

  attr_reader :ratings
  def initialize(lines)
    data = lines.collect { |i| i.chomp.split(":") }
    @ratings = {}
    @totals = {}
    @items = {}
    @similarity = {}
    data.each do |r|
      user, item, rating = r
      @ratings[user] ||= {}
      @ratings[user][item] = rating.to_i
      @totals[user] ||= 0
      @totals[user] += 1
      @items[item] = true
    end
  end

  def users
    @totals.keys
  end

  def items
    @items.keys
  end
  
  # calculate euclidiean distance similarity
  def similarity(a, b)
    common = 0
    sim = 0.0
    max_common = [@ratings[a].keys.size, @ratings[b].keys.size].min
    @ratings[a].each do |thing,rating|
      rb = @ratings[b][thing]
      if rb
        common += 1
        sim += (rating - rb) ** 2
      end
    end
    if common > 0
      distance = Math.sqrt(sim / common)
      sim = 1.0 - Math.tanh(distance)
      sim * common / max_common
    else
      0
    end
  end

end

def estimate_rating(user, item, set)
  sim_sum = weight_sum = 0.0
  return set.ratings[user][item] if set.ratings[user][item]
  set.users.each do |other|
    other_rating = set.ratings[other][item]
    next unless other_rating
    sim = set.similarity(user, other)
    weight = sim * other_rating
    sim_sum += sim
    weight_sum += weight
  end
  if sim_sum > 0
    weight_sum / sim_sum
  else
    nil
  end
end

d = RatingSet.new(ARGF)
users = d.users.sort
subject, *others = users
others.each do |o|
  sim = d.similarity(subject, o)
  printf("%s %s esim %.4f\n", subject, o, sim)
end

d.items.each do |item|
  rating = estimate_rating(subject, item, d)
  puts "estimate rating #{subject} #{item} #{rating}"
end
